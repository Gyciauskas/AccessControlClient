@page "/"
@inject HttpClient Http

<h1>Users</h1>

<a class="btn btn-default" href="/addUser">Add new user</a>
<br />
<br />
<div class="row">
    <div class="col-sm-6">
        <span class="label label-primary">Total users : @totalUsers</span>
        <span class="label label-success">Uploaded in @lasted ms</span>
    </div>
    <div class="col-sm-2">
    </div>
    <div class="col-sm-4">
        <form>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search" bind="@searchKey" />
                <div class="input-group-btn">
                    <button class="btn btn-default" type="submit" onclick=@(async ()=> await SeachUsers(searchKey))><i class="glyphicon glyphicon-search"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>
<table class='table'>
    <thead>
        <tr>
            <th>Name</th>
            <th>LastName</th>

            <th>User Title</th>
            <th>Department</th>
        </tr>
    </thead>
    <tbody>
        @foreach (UserModel user in users)
        {
            <tr>
                <td>@user.Firstname</td>
                <td>@user.Lastname</td>
                <td>@user.UserTitle</td>
                <td>@user.Department</td>
                <td>
                    <a class="btn btn-primary btn-sm" href="/userDetails/@user.Id">Details</a>
                    <a onclick=@(async ()=> await DeleteUserAsync(user.Id, user.Version)) class="btn btn-default btn-sm">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@functions {
    const string BaseUrl = "http://localhost:58009/api";
    //const string BaseUrl = "http://hub.midpoint.lt:58009/api";

    List<UserModel> users { get; set; } = new List<UserModel>();
    long lasted;
    int totalUsers;
    string searchKey;

    protected override async Task OnInitAsync()
    {
        await GetUserList();
    }

    private async Task SeachUsers(string searchKey)
    {
        Console.WriteLine($"searching {searchKey}");

        var watch = System.Diagnostics.Stopwatch.StartNew();

        var userList = await Http.GetJsonAsync<IEnumerable<User>>($"{BaseUrl}/users?skip=0&take=500&search={searchKey}");

        users = userList.Select(u => new UserModel
        {
            Id = u.id,
            Firstname = u.firstName,
            Lastname = u.lastName,
            UserTitle = u.userTitleName,
            Department = u.departmentName,
            Version = u.version
        }).OrderBy(u => u.Lastname).ToList();

        watch.Stop();
        lasted = watch.ElapsedMilliseconds;
        totalUsers = users.Count();

        StateHasChanged();
    }

    private async Task DeleteUserAsync(int id, string version)
    {
        Console.WriteLine($"clicked {id}");

        var httpResponse = await Http.DeleteAsync($"{BaseUrl}/users/{id}?version={version}");

        Console.WriteLine(httpResponse.StatusCode);

        if (httpResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await RefreshUserList();
        }
    }

    private async Task GetUserList()
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();

        var userList = await Http.GetJsonAsync<IEnumerable<User>>($"{BaseUrl}/users?skip=0&take=500");

        users = userList.Select(u => new UserModel
        {
            Id = u.id,
            Firstname = u.firstName,
            Lastname = u.lastName,
            UserTitle = u.userTitleName,
            Department = u.departmentName,
            Version = u.version
        }).OrderBy(u => u.Lastname).ToList();

        watch.Stop();
        lasted = watch.ElapsedMilliseconds;
        totalUsers = users.Count();
    }

    private async Task RefreshUserList()
    {
        await GetUserList();

        StateHasChanged();
    }

    public class UserModel
    {
        public int Id { get; set; }
        public string Firstname { get; set; }
        public string Lastname { get; set; }
        public string UserTitle { get; set; }
        public string Department { get; set; }
        public string Version { get; set; }
    }
}

